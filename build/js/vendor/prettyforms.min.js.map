{"version":3,"sources":["prettyforms.js"],"names":["PrettyForms","checkForCkEditor","element","el_id","attr","CKEDITOR","instances","this","templates","element_validations_container","element_validation_message","form_validation_messages","messages","server_error","really","really_agree","really_title","really_cancel","fix_and_retry","rules","notempty","minlength","maxlength","hasdomain","isnumeric","isemail","isurl","isdate","isphone","minint","maxint","intonly","passretry","checked","Commands","handlers","execute","command","params","registerHandler","name","action","Validator","validation_rules","el","val","form_container","find","length","toString","domains","split","i","indexOf","trim","test","parseInt","RegExp","$1","$3","$5","minInt","password_input_name","is","setValidator","rule_name","error_message","validator_func","getMarkingElement","get","tagName","$","data","$container","container","parent","getElementErrorsContainer","element_name","current_el","map","num","replace","el_errors_container","input_group","closest","after","markElementAsChecked","hide","el_form_group","removeClass","remove","markElementAsErroneous","error_messages","html","show","addClass","stop","css","animate","opacity","validate","checkElement","element_validation_rules","element_rules_texts","isError","el_validation_rule_name","el_validation_rule_param","undefined","match","rule","element_value","getData","el_validation_result","rule_text","hasClass","isValid","validation_errors_container","getInputData","inputs_container","setFormContainer","form_values","form_elements","getInputsList","form_valid","each","form_element","focus","push","lastRequestData","retryRequestsCount","sendData","url","mass","input_container_for_clear","input","retryRequestNum","setTimeout","enableInput","clearInputData","$this","all_true","arr","success","ajax","type","dataType","command_name","command_params","e","console","log","need_clear_inputs","hasOwnProperty","error","status","sendDataAgain","d","document","ready","on","clicked_element","link","form","location","href","execute_action","before","clearinputs","text","text_btn","swal","title","showCancelButton","confirmButtonColor","confirmButtonText","cancelButtonText","closeOnConfirm","allowOutsideClick","confirm","focused","responseJSON","input_name","errors","element_errors_str","error_text","alert"],"mappings":"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","file":"prettyforms.min.js","sourcesContent":["// Class for working with forms on site: validation of a form, sending data to the server and execute commands received from the server\r\n// Класс для работы с формами сайта: валидация элементов формы, отправка данных на сервер и выполнение команд, полученных от сервера\r\nPrettyForms = new function () {\r\n\r\n    // Маленькая функция для проверки на присутствие подключённого к элементу плагина CKEditor\r\n    var checkForCkEditor = function(element) {\r\n        var el_id = element.attr('id');\r\n        if (el_id && typeof(CKEDITOR) !== 'undefined')\r\n        {\r\n            return (CKEDITOR.instances[el_id]) ? true : false;\r\n        }\r\n    };\r\n\r\n\r\n    // HTML-templates used by library\r\n    // HTML-шаблоны, используемые библиотекой\r\n    this.templates = {\r\n        // The container in which to put error messages relating to a particular element\r\n        // Контейнер, в который будут помещены сообщения об ошибках, относящиеся к определённому элементу\r\n        element_validations_container: '<div style=\"display:none;margin-top:10px\" id=\"validation-error-{%}\" class=\"alert alert-danger validation-errors-field\" role=\"alert\"></div>',\r\n        // Error message\r\n        // Сообщение об ошибке\r\n        element_validation_message: '<p><i class=\"fa fa-exclamation-circle\" aria-hidden=\"true\"></i>&nbsp;{%}</p>',\r\n        // A container with a list of common errors related to a form must have a class .validation-errors\r\n        // Контейнер с перечислением общих ошибок, относящихся к форме, обязательно должен иметь класс .validation-errors\r\n        form_validation_messages: '<div style=\"margin-bottom:10px\" class=\"validation-errors alert alert-danger\"></div>'\r\n    };\r\n\r\n    // Messages used by library\r\n    // Сообщения, используемые библиотекой\r\n    this.messages = {\r\n        server_error:  'Что-то пошло не так на сервере, и он не смог обработать ваши данные. Мы постараемся исправить это как можно скорее. Пожалуйста, повторите попытку позже.',\r\n        really:        'Действительно выполнить действие?',\r\n        really_agree:  'Выполнить действие',\r\n        really_title:  'Вы уверены?',\r\n        really_cancel: 'Отмена',\r\n        fix_and_retry: 'Пожалуйста, исправьте ошибки в форме и повторите отправку.',\r\n        rules: {\r\n            notempty:  'Поле не может быть пустым.',\r\n            minlength: 'Не менее {%} символов.',\r\n            maxlength: 'Не более {%} символов.',\r\n            hasdomain: 'Адрес должен начинаться с верного домена ({%})',\r\n            isnumeric: 'Поле может содержать только цифры.',\r\n            isemail:   'Должен быть введен корректный E-Mail',\r\n            isurl:     'Должен быть введен корректный URL-адрес сайта.',\r\n            isdate:    'Поле должно содержать дату',\r\n            isphone:   'Введён не корректный формат телефона',\r\n            minint:    'Минимальное вводимое число {%}',\r\n            maxint:    'Максимальное вводимое число {%}',\r\n            intonly:   'Можно ввести только число',\r\n            passretry: 'Должно быть равно полю с паролем',\r\n            checked:   'Должно быть помечено'\r\n        }\r\n    };\r\n\r\n    // Small class which is engaged in the implementation of commands received from the server\r\n    // Небольшой класс, который занимается выполнением команд, получаемых с сервера\r\n    this.Commands = new function () {\r\n        this.handlers = {}; // An array of registered handler Command | Массив зарегистрированных обработчиков команд\r\n        this.execute = function (command, params) {\r\n            if (this.handlers[command]) {\r\n                this.handlers[command](params);\r\n            }\r\n        };\r\n        /**\r\n         * Register the handler commands sent from the server to the client after processing\r\n         * Зарегистрировать обработчик команды, отправленной сервером клиенту после обработки данных\r\n         * @param string name\r\n         * @param function action\r\n         */\r\n        this.registerHandler = function (name, action) {\r\n            this.handlers[name] = action;\r\n        };\r\n    };\r\n\r\n    // Class facilities to validate the form\r\n    // Класс для валидации объектов формы\r\n    this.Validator = new function () {\r\n        // All validation rules set in the hash, by key will be the name of a validator, the value - the object validator.\r\n        // Все правила валидации засунем в хеш, ключём будет название валидатора, значением - объект валидатор.\r\n        this.validation_rules = {};\r\n\r\n        // Validation Rules\r\n        // The validator returns TRUE, if the no error\r\n        // Правила валидации\r\n        // Валидаторы возвращают TRUE, если нет ошибок\r\n\r\n        this.validation_rules['notempty'] = function (el, val) {\r\n            if (el.attr('type') === 'radio' || el.attr('type') === 'checkbox') {\r\n                return PrettyForms.form_container.find('input[name=\"' + el.attr('name') + '\"]:checked').length > 0;\r\n            } else {\r\n                return val === null\r\n                    ? false\r\n                    : val.toString().length !== 0;\r\n            }\r\n        };\r\n\r\n        this.validation_rules['minlength'] = function (el, val, length) {\r\n            return val.toString().length >= length;\r\n        };\r\n\r\n        this.validation_rules['maxlength'] = function (el, val, length) {\r\n            return val.toString().length <= length;\r\n        };\r\n\r\n        /*\r\n         Checks the domain name into the input box can take multiple parameters separated by commas\r\n         Проверяет наличие доменного имени в поле ввода, может принимать несколько параметров через запятую.\r\n         domains=\"http://vk.com, http://vkontakte.ru\"\r\n         */\r\n        this.validation_rules['hasdomain'] = function (el, val, domains) {\r\n            if (val == '' || val == '(an empty string)') {\r\n                return true;\r\n            }\r\n            domains = domains.split(',');\r\n            for (var i in domains) {\r\n                if (val.indexOf(domains[i].trim()) != -1)\r\n                    return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.validation_rules['isnumeric'] = function (el, val) {\r\n            if (val == '' || val == '(an empty string)')\r\n                return true;\r\n            return /^[0-9]+$/.test(val);\r\n        };\r\n\r\n        this.validation_rules['isemail'] = function (el, val) {\r\n            if (val == '' || val == '(an empty string)')\r\n                return true;\r\n            return /^.+@.+\\..{2,9}$/.test(val);\r\n        };\r\n\r\n        this.validation_rules['isurl'] = function (el, val) {\r\n            if (val == '' || val == '(an empty string)')\r\n                return true;\r\n            return /^(http|ftp|https):\\/\\/.+\\..{2,9}/.test(val);\r\n        };\r\n\r\n        this.validation_rules['isdate'] = function (el, val) {\r\n            if (val == '' || val == '(an empty string)')\r\n                return true;\r\n            if (!/^([0-9]{1,2})(\\.|\\/)([0-9]{1,2})(\\.|\\/)([0-9]{4,4})$/.test(val)) {\r\n                return false;\r\n            } else {\r\n                return (parseInt(RegExp.$1) <= 31 && parseInt(RegExp.$3) <= 12 && parseInt(RegExp.$5) < 2500);\r\n            }\r\n        };\r\n\r\n        this.validation_rules['isphone'] = function (el, val) {\r\n            if (val == '' || val == '(an empty string)' || val == '(an empty string)')\r\n                return true;\r\n            return /^((8|\\+7)?[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/.test(val)\r\n        };\r\n\r\n        this.validation_rules['minint'] = function (el, val, minInt) {\r\n            if (val == '' || val == '(an empty string)')\r\n                return true;\r\n            return parseInt(val) >= parseInt(minInt);\r\n        };\r\n\r\n        this.validation_rules['maxint'] = function (el, val, minInt) {\r\n            if (val == '' || val == '(an empty string)')\r\n                return true;\r\n            return parseInt(val) <= parseInt(minInt);\r\n        };\r\n\r\n        this.validation_rules['intonly'] = function (el, val) {\r\n            if (val == '' || val == '(an empty string)')\r\n                return true;\r\n            return /^[0-9]+$/.test(val);\r\n        };\r\n\r\n        this.validation_rules['passretry'] = function (el, val, password_input_name) {\r\n            if (typeof (password_input_name) === 'undefined') {\r\n                password_input_name = 'password'; // By default, the main INPUT password called \"password\" | По умолчанию осовной инпут с паролем называется \"password\"\r\n            }\r\n            return val === PrettyForms.form_container.find('input[name=\"' + password_input_name + '\"]').val();\r\n        };\r\n\r\n        // Check that checkbox-item is checked, or on one of the elements with the same name\r\n        // Проверить, что на checkbox-элементе стоит галочка, или же на одном из элементов с подобным именем\r\n        this.validation_rules['checked'] = function (el, val) {\r\n            if (el.attr('name').indexOf('[]') === -1) {\r\n                return el.is(':checked');\r\n            } else {\r\n                // If this checkbox array, therefore, among the elements can be labeled with another element.\r\n                // Let's try to look for marked elements on the page of the same name.\r\n                // If we find - we will find it labeled.\r\n                // Если это чекбокс-массив, то следовательно, среди элементов может быть помеченным другой элемент.\r\n                // Попробуем поискать помеченные элементы на странице такого же названия.\r\n                // Если найдем - будем считать его помеченным.\r\n                return (PrettyForms.form_container.find('input[name=\"' + el.attr('name') + '\"]:checked').length > 0);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Add a specific validator\r\n         * Добавить определённый валидатор\r\n         * @param string rule_name The name of the validation rules | Название правила валидации\r\n         * @param function validator_func Validation function | Функция валидации\r\n         * @param string error_message The error message if validation fails | Сообщение об ошибке, если валидация провалилась\r\n         */\r\n        this.setValidator = function(rule_name, error_message, validator_func) {\r\n            this.validation_rules[rule_name] = validator_func;\r\n            PrettyForms.messages.rules[rule_name] = error_message;\r\n        };\r\n\r\n        // Return the item that is marked as invalid, and the user sees. Not always is the original INPUT.\r\n        // Вернуть тот элемент, который будет помечен как ошибочный и который видит пользователь.\r\n        // Не всегда это оригинальный инпут.\r\n        this.getMarkingElement = function(el)\r\n        {\r\n            if (el.get(0).tagName === 'SELECT')\r\n            {\r\n                if ($(el).data('select2'))\r\n                {\r\n                    return $(el).data('select2').$container;\r\n                }\r\n\r\n                if ($(el).data('chosen'))\r\n                {\r\n                    return $(el).data('chosen').container;\r\n                }\r\n            }\r\n\r\n            if (el.get(0).tagName === 'TEXTAREA' && checkForCkEditor(el)) {\r\n                el = $(CKEDITOR.instances[$(el).attr('id')].container.$);\r\n            }\r\n\r\n            if (el.attr('type') === 'checkbox' || el.attr('type') === 'radio') {\r\n                el = el.parent().parent();\r\n            }\r\n\r\n            return el;\r\n        };\r\n\r\n        // Returns the container element errors. If the container is not found,\r\n        // it will be created immediately after the element\r\n        // Возвращает контейнер с ошибками элемента. Если контейнер не найден,\r\n        // он будет создан сразу после элемента\r\n        this.getElementErrorsContainer = function(el) {\r\n            var element_name = el.attr('name');\r\n            var current_el = el.get(0);\r\n\r\n            // If the specified object - it is an array, it will have to begin to calculate its number\r\n            // Если указанный объект - это массив, то придётся для начала вычислить его номер\r\n            if (element_name.indexOf('[') !== -1) {\r\n                PrettyForms.form_container.find('[name=\"'+element_name+'\"]').map(function(num) {\r\n                    if (this === current_el) {\r\n                        element_name = element_name.replace('[','').replace(']','') + '-' + num;\r\n                    }\r\n                });\r\n            }\r\n\r\n            el = this.getMarkingElement(el);\r\n            var el_errors_container = PrettyForms.form_container.find('#validation-error-' + element_name);\r\n\r\n            if (el_errors_container.length === 0) {\r\n\r\n                var input_group = el.closest('.input-group');\r\n                if (input_group.length > 0) {\r\n                    el = input_group;\r\n                }\r\n\r\n                // If the container was not found errors on a page, add it\r\n                // Если контейнер для ошибок не был найден на странице, добавим его\r\n                el.after(PrettyForms.templates.element_validations_container.replace('{%}', element_name));\r\n                el_errors_container = PrettyForms.form_container.find('#validation-error-' + element_name);\r\n            }\r\n            return el_errors_container;\r\n        };\r\n\r\n        // We mark the item as checked (delete error messages)\r\n        // Пометим элемент как проверенный (удалим все сообщения об ошибках)\r\n        this.markElementAsChecked = function(el) {\r\n            var el_errors_container = this.getElementErrorsContainer(el);\r\n            el_errors_container.hide();\r\n\r\n            // If INPUT is within .form-group, we will work with him\r\n            // Если инпут находится внутри .form-group, будем работать с ним\r\n            var el_form_group = el.closest('.form-group');\r\n            if (el_form_group.length !== 0) {\r\n                el_form_group.removeClass('has-warning');\r\n                //el_form_group.addClass('has-feedback');\r\n                //el_form_group.addClass('has-success');\r\n                if (el.get(0).tagName === 'INPUT') {\r\n                    el_form_group.find('span.glyphicon').remove();\r\n                    //el.after('<span class=\"glyphicon glyphicon-ok form-control-feedback\" aria-hidden=\"true\"></span>');\r\n                }\r\n            } else {\r\n                this.getMarkingElement(el).removeClass('prettyforms-validation-error');\r\n            }\r\n        };\r\n\r\n        // Mark an item as containing an error\r\n        // Пометим элемент как содержащий ошибку\r\n        this.markElementAsErroneous = function(el,error_messages,server_error) {\r\n            var el_errors_container = this.getElementErrorsContainer(el);\r\n            el_errors_container.html(error_messages).show();\r\n\r\n            if (server_error === true) {\r\n                el.addClass('validation-server-error');\r\n            }\r\n\r\n            // If INPUT is within .form-group, we will work with him. Otherwise, add a class .prettyforms-validation-error\r\n            // Если инпут находится внутри .form-group, будем работать с ним. Иначе добавим класс .prettyforms-validation-error\r\n            var el_form_group = el.closest('.form-group');\r\n            if (el_form_group.length !== 0) {\r\n                el_form_group.addClass('has-feedback');\r\n                el_form_group.removeClass('has-success');\r\n                el_form_group.find('span.glyphicon.glyphicon-warning-sign.form-control-feedback').remove();\r\n                if (server_error !== true) {\r\n                    el_form_group.addClass('has-warning');\r\n                    if (el.get(0).tagName === 'INPUT') {\r\n                        el.after('<span class=\"glyphicon glyphicon-warning-sign form-control-feedback\" aria-hidden=\"true\"></span>');\r\n                    }\r\n                }\r\n            } else {\r\n                this.getMarkingElement(el).addClass('prettyforms-validation-error');\r\n            }\r\n\r\n            el_errors_container.stop().css('opacity', '1').animate({opacity: 0.7}, 1500, 'linear');\r\n        };\r\n\r\n        this.validate = function (el) {\r\n\r\n            // The function of direct verification element\r\n            // Функция непосредственной проверки элемента\r\n            var checkElement = function (el) {\r\n                var element_validation_rules = el.attr('data-validation').split(';');\r\n                var element_rules_texts = '';\r\n                var isError = false;\r\n\r\n                for (var i in element_validation_rules) {\r\n                    var el_validation_rule_name = element_validation_rules[i].toString().trim();\r\n\r\n                    el_validation_rule_param = undefined;\r\n\r\n                    // Try to get additional validation parameters\r\n                    // Пробуем получить дополнительные параметры валидации\r\n                    if (el_validation_rule_name.match(':')) {\r\n                        var el_validation_rule_param = el_validation_rule_name.split(':');\r\n                        el_validation_rule_name = el_validation_rule_param[0].toString().trim();\r\n                        el_validation_rule_param = el_validation_rule_param[1].toString().trim();\r\n                    }\r\n\r\n                    // We reach the validator object by its name and check them object.\r\n                    // Достаём объект-валидатор по его названию и проверяем им объект.\r\n                    var rule = PrettyForms.Validator.validation_rules[el_validation_rule_name];\r\n                    if (typeof (rule) !== 'undefined') {\r\n                        var element_value = el.val();\r\n\r\n                        // If it is a large text entry field, and it is attached to the editor CKEditor, it'll take the instance data\r\n                        // Если это поле ввода большого текста, и к нему прикреплен редактор CKEditor, заберём данные его инстанс\r\n                        if (el.get(0).tagName === 'TEXTAREA' && checkForCkEditor(el))\r\n                        {\r\n                            element_value = CKEDITOR.instances[el.attr('id')].getData();\r\n                        }\r\n\r\n                        // REMEMBER! VALIDATOR returns TRUE IF THESE validity\r\n                        // ПОМНИ! VALIDATOR ВЕРНЁТ TRUE ЕСЛИ ДАННЫЕ ВАЛИДНЫ\r\n                        var el_validation_result = rule(el, element_value, el_validation_rule_param);\r\n                        if (el_validation_result === false) {\r\n                            isError = true;\r\n\r\n                            var rule_text = PrettyForms.messages.rules[el_validation_rule_name].replace('{%}', el_validation_rule_param);\r\n                            element_rules_texts += PrettyForms.templates.element_validation_message.replace('{%}', rule_text);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (isError) {\r\n                    return element_rules_texts;\r\n                } else {\r\n                    return true;\r\n                }\r\n            };\r\n\r\n            // If it is a hidden element, which does not apply a JS-component, like a library, or Chosen, or CKEditor'a - not to check his\r\n            // Если это скрытый элемент, к которому не применен некий JS-компонент, вроде плагина Chosen или CKEditor'а -  то не проверять его\r\n            if (!el.is(':visible')\r\n                    && !el.data('chosen')\r\n                    && !el.data('select2')\r\n                    && !checkForCkEditor(el)\r\n            ) {\r\n\r\n                return true;\r\n            }\r\n\r\n            // Object does not have validation rules - there is nothing to check\r\n            // У объекта нет правил валидации - нечего проверять\r\n            if (!el.attr('data-validation')) {\r\n                return true;\r\n            }\r\n\r\n            // If an item has the class, the server reported an error on it. Disable checking this item.\r\n            // Если элемент имеет данный класс, значит сервер сообщил об ошибке на нём. Отключим проверку этого элемента.\r\n            if (el.hasClass('validation-server-error')) {\r\n                return true;\r\n            }\r\n\r\n            // Actually, the verification element\r\n            // Собственно, сама проверка элемента\r\n            var isValid = checkElement(el);\r\n\r\n            // The element is checked, no errors\r\n            // Элемент проверен, ошибок нет\r\n            if (isValid === true) {\r\n                PrettyForms.Validator.markElementAsChecked(el);\r\n                return true;\r\n            } else {\r\n                // During the validation of any errors,\r\n                // Mark an item in red and generate small animation\r\n                // Во время валидации элемента возникли ошибки,\r\n                // Пометим элемент красным и сгенерируем небольшую анимацию\r\n                PrettyForms.Validator.markElementAsErroneous(el,isValid);\r\n                return false;\r\n            }\r\n        };\r\n    };\r\n    this.validation_errors_container = null;\r\n\r\n    // Collect data from said container, simultaneously checking them all validator\r\n    // Собрать данные из указанного контейнера, попутно проверив всех их валидатором\r\n    this.getInputData = function (inputs_container) {\r\n\r\n        this.setFormContainer(inputs_container);\r\n\r\n        if (typeof (inputs_container) !== 'undefined' && inputs_container !== '') {\r\n            var form_values = {},\r\n                form_elements = this.getInputsList(inputs_container);\r\n\r\n            var form_valid = true;\r\n            form_elements.each(function (el) {\r\n                var form_element = $(this),\r\n                        element_value = undefined;\r\n\r\n                if (form_element.attr('name') != undefined && form_element.attr('data-dontsend') !== 'true') {\r\n\r\n                    if (!PrettyForms.Validator.validate(form_element)) {\r\n                        if (form_valid) {\r\n                            // We focus on the first wrong element\r\n                            // Сфокусируемся на первом ошибочном элементе\r\n                            PrettyForms.Validator.getMarkingElement(form_element).focus();\r\n                        }\r\n                        form_valid = false;\r\n                    }\r\n\r\n                    // If the name is [] then we send the server array\r\n                    // Если имя имеет [] то шлём серверу массив.\r\n                    if (form_element.attr('name').indexOf('[]') !== -1) {\r\n                        if (typeof (form_values[form_element.attr('name')]) === 'undefined') {\r\n                            form_values[form_element.attr('name')] = [];\r\n                        }\r\n                    }\r\n\r\n                    switch(form_element.attr('type')) {\r\n                        // Радио и чекбоксы надо проверить на \"чекнутость\" перед добавлением\r\n                        case 'radio':\r\n                        case 'checkbox':\r\n                            if (form_element.is(':checked')) {\r\n                                element_value = form_element.val();\r\n                            }\r\n                        break;\r\n                        default:\r\n                            element_value = form_element.val();\r\n                        break;\r\n                    }\r\n\r\n                    // If this textarea, and it is attached editor - get the value of the element through the instance of CKEditor\r\n                    // Если это textarea и к ней прикреплен редактор - получим значение элемента через инстанс CKEditor'а\r\n                    if (form_element.get(0).tagName === 'TEXTAREA' && typeof (CKEDITOR) !== 'undefined' && CKEDITOR.instances[form_element.attr('name')]) {\r\n                        element_value = CKEDITOR.instances[form_element.attr('name')].getData();\r\n                    }\r\n\r\n                    if (typeof (form_values[form_element.attr('name')]) === 'object' && typeof (element_value) !== 'undefined') {\r\n                        form_values[form_element.attr('name')].push(element_value);\r\n                    } else if (typeof (element_value) !== 'undefined') {\r\n                        form_values[form_element.attr('name')] = element_value;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (form_valid) {\r\n                return form_values;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n\r\n    // Pull out all the INPUT of said container\r\n    // Вытащить все инпуты из указанного контейнера\r\n    this.getInputsList = function (inputs_container) {\r\n        return $(inputs_container).find('input, select, textarea');\r\n    };\r\n\r\n    // Set container to the current form of the a certain element\r\n    // Установить в качетве контейнера текущей формы определённый элемент\r\n    this.setFormContainer = function(element) {\r\n        this.form_container = $(element);\r\n    };\r\n\r\n    this.lastRequestData = {}\r\n    this.retryRequestsCount = 0\r\n\r\n    /**\r\n     * Send data to a URL and process the response\r\n     * Отправить данные на определенный URL и обработать ответ\r\n     * @param string url\r\n     * @param object mass\r\n     * @param object input_container (optionally) a container in which you will clear all data entered by INPUT (необязательно) контейнер, в котором необходимо будет очистить все инпуты от введенных данных\r\n     */\r\n    this.sendData = function (url, mass, input_container_for_clear, input, retryRequestNum) {\r\n        // Deny clicking repeatedly on our button while sending the data goes\r\n        // Запретим кликать повторно на нашу кнопочку, пока идёт отправка данных\r\n        input.attr('disabled', 'disabled').addClass('disabled');\r\n        setTimeout(function(){\r\n            // After 10 seconds, then switch it back to avoid unforeseen situations\r\n            // Через 10 секунд включим её обратно во избежание непредвиденных ситуаций\r\n            input.removeClass('disabled').attr('disabled',null);\r\n        },10000);\r\n\r\n        // Later, we include our back button and give the opportunity to click on it\r\n        // Позже включим обратно нашу кнопочку и дадим возможность кликать на неё\r\n        var enableInput = function () {\r\n            input.removeClass('disabled').attr('disabled', null);\r\n        };\r\n\r\n        // Clear all of the data in the specified INPUT container\r\n        // Очистить от данных все инпуты в указанном контейнере\r\n        var clearInputData = function (inputs_container) {\r\n            PrettyForms.getInputsList(inputs_container).map(function () {\r\n                var $this = $(this);\r\n                if ($this.attr('type') !== 'hidden') {\r\n                    $this.val('');\r\n                }\r\n            });\r\n        };\r\n\r\n        // We check that all elements in the array are true\r\n        // Проверим, что все элементы в массиве равны true\r\n        var all_true = function (arr) {\r\n            var success = true;\r\n            arr.map(function (el) {\r\n                if (el !== true) {\r\n                    success = false;\r\n                }\r\n            });\r\n            return success;\r\n        };\r\n\r\n        // Запомним все данные этого запроса, чтобы иметь возможность\r\n        // при необходимости повтоирть его. Такое может быть тогда, когда\r\n        // мы например делаем запрос, а сервер говорит о том, что секретный\r\n        // токен устарел и не делает ничего.\r\n        PrettyForms.lastRequestData = {\r\n            url : url,\r\n            data : mass,\r\n            input_container_for_clear : input_container_for_clear,\r\n            input : input\r\n        }\r\n\r\n        if (retryRequestNum === undefined) {\r\n            PrettyForms.retryRequestsCount = 0\r\n        } else {\r\n            PrettyForms.retryRequestsCount += 1\r\n        }\r\n\r\n        // Предотвратим повторнуюотправку одинаковых запросов\r\n        if (PrettyForms.retryRequestsCount > 2) {\r\n            return\r\n        }\r\n\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: url,\r\n            data: mass,\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                // Including reverse button to send data\r\n                // Включим обратно кнопку отправки данных\r\n                enableInput();\r\n\r\n                // If the server replied, try the command received from him\r\n                // Если сервер ответил, попытаемся выполнить полученные от него команды\r\n                $.each(data, function(command_name, command_params) {\r\n                    try {\r\n                        PrettyForms.Commands.execute(command_name, command_params);\r\n                    } catch (e) {\r\n                        console.log('error in handling message', e);\r\n                    }\r\n                });\r\n\r\n                var need_clear_inputs = [];\r\n                need_clear_inputs.push(! data.hasOwnProperty('validation_errors')); // This is not the answer to validate the data sent unclimbed | Это не ответ о непройденной валидации отправленных данных\r\n                need_clear_inputs.push(input_container_for_clear !== false); // The container was specified for INPUT | Контейнер для инпутов был указан\r\n\r\n                if (all_true(need_clear_inputs)) {\r\n                    clearInputData(input_container_for_clear);\r\n                }\r\n            },\r\n            error: function (data, status, e) {\r\n\r\n                enableInput();\r\n\r\n                if (data.status === 422) {\r\n                    // Validation error | Ошибка валидации\r\n                    PrettyForms.Commands.execute('validation_errors', data);\r\n                } else {\r\n                    PrettyForms.Commands.execute('validation_errors', PrettyForms.messages.server_error);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    this.sendDataAgain = function() {\r\n        var d = PrettyForms.lastRequestData;\r\n        this.sendData(d.url, d.data, d.input_container_for_clear, d.input, PrettyForms.retryRequestsCount)\r\n    }\r\n};\r\n\r\n$(document).ready(function () {\r\n\r\n    // When the form is submitted automatically to validate the data in it\r\n    // При отправке формы автоматически производить валидацию данных в ней\r\n    $('body').on('submit', 'form', function () {\r\n        var form_values = PrettyForms.getInputData(this);\r\n        if (form_values === false) {\r\n            // If during the data collection errors were found validation prevent sending form\r\n            // Если во время сбора данных были обнаружены ошибки валидации, предотвратим отправку формы\r\n            PrettyForms.validation_errors_container = $(this).find('.validation-errors');\r\n            PrettyForms.Commands.execute('validation_errors');\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    });\r\n\r\n    // We capture clicks on the elements with the class .senddata\r\n    // Перехватим клики на элементы с классом .senddata\r\n    $('body').on('click', '.senddata', function () {\r\n        var clicked_element = $(this);\r\n        var link = clicked_element.attr('href');\r\n        if (typeof (link) === 'undefined' || link === '#')\r\n            link = clicked_element.attr('data-link');\r\n\r\n        if (typeof (link) === 'undefined') {\r\n            var form = clicked_element.closest('form');\r\n            if (form.length > 0) {\r\n                link = form.attr('action');\r\n            }\r\n        }\r\n\r\n        if (typeof (link) === 'undefined') {\r\n            link = document.location.href;\r\n        }\r\n\r\n        var inputs_container = $(clicked_element.attr('data-input'));\r\n        if (inputs_container.length === 0) {\r\n            inputs_container = clicked_element.closest('form');\r\n        }\r\n\r\n        if (!clicked_element.hasClass('disabled') && typeof (clicked_element.attr('disabled')) === 'undefined') {\r\n\r\n            var execute_action = function() {\r\n                if (inputs_container.length > 0) {\r\n\r\n                    PrettyForms.setFormContainer(inputs_container);\r\n\r\n                    PrettyForms.validation_errors_container = inputs_container.find('.validation-errors');\r\n                    if (PrettyForms.validation_errors_container.length === 0) {\r\n                        // If the container for validation errors could not be found on the page, add it to the button\r\n                        // Если контейнер для ошибок валидации не был найден на странице, добавим его перед кнопкой\r\n                        clicked_element.before(PrettyForms.templates.form_validation_messages);\r\n                        PrettyForms.validation_errors_container = inputs_container.find('.validation-errors');\r\n                    }\r\n                    PrettyForms.validation_errors_container.html('').hide();\r\n\r\n                    $(inputs_container).find('.validation-server-error').removeClass('validation-server-error');\r\n\r\n                    var form_values = PrettyForms.getInputData(inputs_container);\r\n                    if (form_values === false) {\r\n                        PrettyForms.Commands.execute('validation_errors');\r\n                    } else {\r\n                        var clearinputs = false;\r\n                        if (clicked_element.attr('data-clearinputs') === 'true') {\r\n                            clearinputs = inputs_container;\r\n                        }\r\n\r\n                        PrettyForms.sendData(link, form_values, clearinputs, clicked_element);\r\n                    }\r\n                } else {\r\n                    PrettyForms.validation_errors_container = $('');\r\n                    // If not specified container from which it is necessary to gather information,\r\n                    // simply send a request to the specified URL and process the response.\r\n                    // A container as errors just do rodidelsky button element, which was committed by a click.\r\n                    // Если не был указан контейнер, из которого надо собрать информацию,\r\n                    // то просто отправим запрос на указанный URL и обработаем ответ.\r\n                    // А в качестве контейнера ошибок просто сделаем родидельский элемент кнопки,\r\n                    // по которой был совершён клик.\r\n\r\n                    form_values = {};\r\n\r\n                    PrettyForms.setFormContainer(clicked_element.parent());\r\n\r\n                    PrettyForms.sendData(link, form_values, false, clicked_element);\r\n                }\r\n            };\r\n\r\n            if (clicked_element.hasClass('really')) {\r\n                var text = PrettyForms.messages.really;\r\n                if (clicked_element.attr('data-really-text')) {\r\n                    text = clicked_element.attr('data-really-text');\r\n                }\r\n\r\n                if (typeof(swal) !== 'undefined') {\r\n\r\n                    var text_btn = clicked_element.attr('data-really-text-btn')\r\n                        ? clicked_element.attr('data-really-text-btn')\r\n                        : PrettyForms.messages.really_agree;\r\n\r\n                    swal({\r\n                        title               : PrettyForms.messages.really_title,\r\n                        text                : text,\r\n                        type                : \"warning\",\r\n                        showCancelButton    : true,\r\n                        confirmButtonColor  : \"#DD6B55\",\r\n                        confirmButtonText   : text_btn,\r\n                        cancelButtonText    : PrettyForms.messages.really_cancel,\r\n                        closeOnConfirm      : true,\r\n                        allowOutsideClick   : false\r\n                    }, function() {\r\n                        execute_action();\r\n                    });\r\n                } else {\r\n                    if (confirm(text)) {\r\n                        execute_action();\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n            } else {\r\n                execute_action();\r\n            }\r\n\r\n        }\r\n\r\n        return false;\r\n    });\r\n\r\n    PrettyForms.Commands.registerHandler('validation_errors', function (data) {\r\n        if (PrettyForms.validation_errors_container.length > 0) {\r\n            var html = PrettyForms.messages.fix_and_retry;\r\n            if (typeof(data) !== 'undefined') {\r\n                if (typeof(data) === 'string') {\r\n                    // If the error was passed just a string - display it in general container with error messages\r\n                    // Если в качестве ошибки была передана просто строка - отобразим её\r\n                    // в общем контейнере с сообщениями об ошибках\r\n                    PrettyForms.validation_errors_container.html(data).show();\r\n                } else {\r\n                    var focused = false;\r\n\r\n                    $.each(data.responseJSON, function(input_name, errors) {\r\n                        var element = PrettyForms.form_container.find('[name=\"'+input_name+'\"]');\r\n                        if (element.length > 0) {\r\n                            var element_errors_str = '';\r\n                            errors.map(function(error) {\r\n                                var error_text = PrettyForms.templates.element_validation_message.replace('{%}', error);\r\n                                element_errors_str += error_text;\r\n                                html += error_text;\r\n                            });\r\n                            PrettyForms.Validator.markElementAsErroneous(element,element_errors_str,true);\r\n                            if (focused === false) {\r\n                                PrettyForms.Validator.getMarkingElement(element).focus();\r\n                                focused = true;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    PrettyForms.validation_errors_container.html(html).show();\r\n                }\r\n            } else {\r\n                PrettyForms.validation_errors_container.html(html).show();\r\n            }\r\n        }\r\n    });\r\n\r\n    // Redirect to another page\r\n    PrettyForms.Commands.registerHandler('redirect', function (link) {\r\n        if (typeof(link) === 'undefined') {\r\n            link = document.location.href;\r\n        }\r\n        document.location.href = link;\r\n    });\r\n\r\n    // Refresh page\r\n    PrettyForms.Commands.registerHandler('refresh', function () {\r\n        document.location.href = document.location.href;\r\n    });\r\n\r\n    PrettyForms.Commands.registerHandler('nothing', function () {\r\n        // nothing to do\r\n    });\r\n\r\n    PrettyForms.Commands.registerHandler('success', function (data) {\r\n        if (typeof(swal) !== 'undefined') {\r\n            swal(data.title, data.text, \"success\");\r\n        } else {\r\n            alert(data.title + '\\n\\n' + data.text);\r\n        }\r\n    });\r\n\r\n    PrettyForms.Commands.registerHandler('warning', function (data) {\r\n        if (typeof(swal) !== 'undefined') {\r\n            swal(data.title, data.text, \"warning\");\r\n        } else {\r\n            alert(data.title + '\\n\\n' + data.text);\r\n        }\r\n    });\r\n\r\n    PrettyForms.Commands.registerHandler('info', function (data) {\r\n        if (typeof(swal) !== 'undefined') {\r\n            swal(data.title, data.text, \"info\");\r\n        } else {\r\n            alert(data.title + '\\n\\n' + data.text);\r\n        }\r\n    });\r\n\r\n    PrettyForms.Commands.registerHandler('error', function (data) {\r\n        if (typeof(swal) !== 'undefined') {\r\n            swal(data.title, data.text, \"error\");\r\n        } else {\r\n            alert(data.title + '\\n\\n' + data.text);\r\n        }\r\n    });\r\n});\r\n"],"sourceRoot":"/source/"}